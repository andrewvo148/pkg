// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: companies.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCompany = `-- name: GetCompany :one
SELECT id, title, description, create_time, update_time FROM jobs.companies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCompany(ctx context.Context, id pgtype.UUID) (JobsCompany, error) {
	row := q.db.QueryRow(ctx, getCompany, id)
	var i JobsCompany
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, title, description, create_time, update_time FROM jobs.companies
`

func (q *Queries) ListCompanies(ctx context.Context) ([]JobsCompany, error) {
	rows, err := q.db.Query(ctx, listCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobsCompany
	for rows.Next() {
		var i JobsCompany
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
